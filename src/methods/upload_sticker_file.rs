// WARNING: THIS CODE IS AUTOGENERATED.
// DO NOT EDIT!!!

#![allow(clippy::too_many_arguments)]
use serde::Serialize;

use crate::error::Result;
use crate::types::File;
use crate::types::InputFile;
use crate::Bot;

impl Bot {
    /// Use this method to upload a file with a sticker for later use in the createNewStickerSet and addStickerToSet methods (the file can be used multiple times). Returns the uploaded File on success.
    /// <https://core.telegram.org/bots/api#uploadstickerfile>
    pub fn upload_sticker_file(
        &self,
        user_id: i64,
        sticker: InputFile,
        sticker_format: String,
    ) -> UploadStickerFileBuilder {
        UploadStickerFileBuilder::new(self, user_id, sticker, sticker_format)
    }
}

#[derive(Serialize)]
pub struct UploadStickerFileBuilder<'a> {
    #[serde(skip)]
    bot: &'a Bot,
    /// User identifier of sticker file owner
    pub user_id: i64,
    /// A file with the sticker in .WEBP, .PNG, .TGS, or .WEBM format. See https://core.telegram.org/stickers for technical requirements. More information on Sending Files: https://core.telegram.org/bots/api#sending-files
    pub sticker: InputFile,
    /// Format of the sticker, must be one of "static", "animated", "video"
    pub sticker_format: String,
}

impl<'a> UploadStickerFileBuilder<'a> {
    pub fn new(bot: &'a Bot, user_id: i64, sticker: InputFile, sticker_format: String) -> Self {
        Self {
            bot,
            user_id,
            sticker,
            sticker_format,
        }
    }

    pub fn user_id(mut self, user_id: i64) -> Self {
        self.user_id = user_id;
        self
    }

    pub fn sticker(mut self, sticker: InputFile) -> Self {
        self.sticker = sticker;
        self
    }

    pub fn sticker_format(mut self, sticker_format: String) -> Self {
        self.sticker_format = sticker_format;
        self
    }

    pub async fn send(self) -> Result<File> {
        let form = serde_json::to_value(&self)?;
        self.bot.get::<File>("uploadStickerFile", Some(&form)).await
    }
}
